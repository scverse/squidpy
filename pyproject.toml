[build-system]
requires = ['setuptools', 'setuptools_scm']
build-backend = 'setuptools.build_meta'

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/

)
'''

[tool.isort]
profile = "black"
py_version = "38"
skip = "docs/source/conf.py,.tox,build"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
known_stdlib = "joblib"
known_bio = "anndata,scanpy"
known_num = "numpy,numba,scipy,sklearn,statsmodels,pandas,xarray,dask"
known_plot = "matplotlib,seaborn,napari"
known_gui = "PyQt5,superqt"
known_img = "skimage,tifffile,dask_image"
known_graph = "networkx"
sections = "FUTURE,STDLIB,THIRDPARTY,BIO,NUM,GUI,PLOT,IMG,GRAPH,FIRSTPARTY,LOCALFOLDER"
no_lines_before="LOCALFOLDER"
balanced_wrapping = true
force_grid_wrap = 0
length_sort = "1"
indent = "    "
from_first = true
order_by_type = true
atomic = true
combine_star = true
combine_as_imports = true
honor_noqa = true
remove_redundant_aliases = true
only_modified = true
group_by_package = true
force_alphabetical_sort_within_sections = true
lexicographical = true

[tool.towncrier]
package = "squidpy"
single_file = false
filename = "docs/source/release/notes-{version}.rst"
directory = "docs/source/release/changelog"
issue_format = "`#{issue} <https://github.com/scverse/squidpy/pull/{issue}>`__"
template = "docs/source/release/changelog/template.rst"
underlines = ["~", "-"]
all_bullets = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations (in next major release)"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Documentation"
showcontent = true

[tool.ruff]
exclude = [
    ".git",
    ".tox",
    "__pycache__",
    "build",
    "docs/_build",
    "dist",
    "setup.py"
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix, i, j, k, l is reasonable indexing notation
    "E741",
    # Missing docstring in public package
    "D104",
    # ... imported but unused
    "F401",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Do not perform function calls in argument defaults.
    "B008",
    # Missing docstring in magic method
    "D105",
    # Missing blank line before section
    "D411",
    # D100 Missing docstring in public module
    "D100",
    # D107 Missing docstring in __init__,
    "D107",
    # B008 Do not perform function calls in argument defaults.
    "B008",
    # B024 Do not use `__class__` for string comparisons.
    "B024",
    ## Flake8 rules not supported by ruff:
    # RST201 Block quote ends without a blank line; unexpected unindent.
    # "RST201",
    # RST301 Unexpected indentation.
    # "RST301",
    # RST306 Unknown target name.
    # "RST306",
    # RST203 Definition list ends without a blank line; unexpected unindent.
    # "RST203",
    # line break before a binary operator -> black does not adhere to PEP8
    # "W503",
    # line break occured after a binary operator -> black does not adhere to PEP8
    # "W504",
    # whitespace before : -> black does not adhere to PEP8
    # "E203",
    # whitespace before : -> black does not adhere to PEP8
    # "E203",
    # missing whitespace after ,', ';', or ':' -> black does not adhere to PEP8
    # "E231",
    # continuation line over-indented for hanging indent -> black does not adhere to PEP8
    # "E126",
    # inline comment should start with '#' -> Scanpy allows them for specific explanations
    # "E266",
    # format string does contain unindexed parameters
    # "P101",
    # indentation is not a multiple of 4
    # "E111",
    # "E114",
]
line-length = 120
select = [
    "I", # isort
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    # below are not autofixed
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
]
unfixable = ["B", "UP", "C4", "BLE"]
target-version = "py38"
[tool.ruff.per-file-ignores]
    "*/__init__.py" = ["D104", "F401"]
    "tests/*"= ["D"]
    "docs/*"= ["D","B"]
    "squidpy/pl/_ligrec.py"= ["D","B"]
    "squidpy/_constants/_pkg_constants.py"= ["D101","D102","D106"]
    "squidpy/_constants/_constants.py"= ["D101"]
    "squidpy/pl/_interactive/_widgets.py"= ["D"]
    ".scripts/ci/download_data.py"= ["D","B"]
    # "squidpy/*.py"= ["RST303"]
[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
